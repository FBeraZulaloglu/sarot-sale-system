import { MainLayout } from "@/components/layout/MainLayout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent } from "@/components/ui/tabs";
import { Project, Room, House } from "@/types";
import { 
  ChevronLeft, Building2, Home, Calendar, Check,
  BedDouble, DollarSign, Users, Play, Layers, Building, Hotel
} from "lucide-react";
import { DateRangeFilter } from "@/components/projects/DateRangeFilter";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { RoomTooltip } from "@/components/projects/RoomTooltip";
import { useState, useEffect } from "react";
import { Badge } from "@/components/ui/badge";
import { YoutubeVideoDialog } from "@/components/projects/YoutubeVideoDialog";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Link, useParams, useSearchParams } from "react-router-dom";
import { MOCK_PROJECTS, MOCK_ROOMS } from "@/data/projects";
import { MOCK_RESERVATIONS } from "@/data/reservations";

export default function ProjectDetails() {
  const { projectId } = useParams<{ projectId: string }>();
  const [searchParams] = useSearchParams();
  const houseId = searchParams.get('house');
  const project = MOCK_PROJECTS.find(p => p.id === projectId) || MOCK_PROJECTS[0];
  const [startDateFilter, setStartDateFilter] = useState<Date | undefined>(undefined);
  const [endDateFilter, setEndDateFilter] = useState<Date | undefined>(undefined);
  const [isVideoDialogOpen, setVideoDialogOpen] = useState(false);
  const [selectedFloor, setSelectedFloor] = useState<number | string>(1);
  const [tabsValue, setTabsValue] = useState<string>('1');
  const [selectedHouse, setSelectedHouse] = useState<House | null>(null);
  const [selectedFloorType, setSelectedFloorType] = useState<string>('A-C');
  const youtubeVideoId = "MHfT2GAOMV4";

  // Find the selected house if houseId is provided
  useEffect(() => {
    if (houseId && project.houses) {
      const house = project.houses.find(h => h.id === houseId);
      if (house) {
        setSelectedHouse(house);
      }
    }
  }, [houseId, project.houses]);

  // Filter rooms for this project from the imported MOCK_ROOMS array
  const rooms = selectedHouse
    ? MOCK_ROOMS.filter(room => room.projectId === projectId && room.houseId === selectedHouse.id)
    : MOCK_ROOMS.filter(room => room.projectId === projectId);

  // Function to check if a room is available between dates
  const isRoomAvailableBetweenDates = (roomId: string, startDate?: Date, endDate?: Date): boolean => {
    // If no dates selected, room is considered available
    if (!startDate || !endDate) return true;
    
    // Check if room has any reservations that overlap with the date range
    const overlappingReservations = MOCK_RESERVATIONS.filter(reservation => {
      if (reservation.roomId !== roomId) return false;
      
      // Check for any overlap between the date ranges
      return !(
        (reservation.endDate < startDate) || 
        (reservation.startDate > endDate)
      );
    });
    
    // Room is available if there are no overlapping reservations and it's not sold
    return overlappingReservations.length === 0;
  };

  // Filter rooms based on date and status
  const filteredRooms = rooms.filter(room => {
    // If a house is selected, only show rooms for that house
    if (selectedHouse && room.houseId !== selectedHouse.id) {
      return false;
    }
    
    // Filter by date range if both dates are selected
    const isAvailableInDateRange = isRoomAvailableBetweenDates(room.id, startDateFilter, endDateFilter);
    
    return isAvailableInDateRange;
  });

  // Group rooms by floor
  const roomsByFloor = rooms.reduce((acc, room) => {
    if (!acc[room.floor]) {
      acc[room.floor] = [];
    }
    acc[room.floor].push(room);
    return acc;
  }, {} as Record<string | number, Room[]>);

  // Get available floors - handle both numeric and string floor types
  const availableFloors = Object.keys(roomsByFloor).map(floor => {
    return isNaN(Number(floor)) ? floor : Number(floor);
  }).sort((a, b) => {
    // Custom sort function to handle both string and number floors
    if (typeof a === 'string' && typeof b === 'string') return a.localeCompare(b);
    if (typeof a === 'number' && typeof b === 'number') return a - b;
    // String floors come before number floors
    return typeof a === 'string' ? -1 : 1;
  });

  // Ensure selectedFloor is valid
  useEffect(() => {
    if (availableFloors.length > 0 && !availableFloors.includes(selectedFloor)) {
      setSelectedFloor(availableFloors[0]);
    }
  }, [availableFloors, selectedFloor]);

  // Get rooms for the selected floor
  const roomsForSelectedFloor = roomsByFloor[selectedFloor.toString()] || [];

  // Count rooms by status - only if date filter is applied
  const isDateFilterApplied = startDateFilter !== undefined && endDateFilter !== undefined;
  
  // Count rooms by type (1+1, 2+1, etc.)
  const roomCountsByType = rooms.reduce((acc, room) => {
    const type = room.type || 'unknown';
    acc[type] = (acc[type] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);
  
  // Room counts will only be calculated if date filter is applied
  const roomCounts = isDateFilterApplied ? {
    total: filteredRooms.length,
    available: filteredRooms.filter(room => room.status === 'available' && 
      isRoomAvailableBetweenDates(room.id, startDateFilter, endDateFilter)).length,
    reserved: filteredRooms.filter(room => room.status === 'reserved' || 
      !isRoomAvailableBetweenDates(room.id, startDateFilter, endDateFilter)).length,
    sold: filteredRooms.filter(room => room.status === 'sold').length,
  } : {
    total: rooms.length,
    available: 0,
    reserved: 0,
    sold: 0,
  };

  // Calculate room status by floor - only if date filter is applied
  const roomStatusByFloor = Object.entries(roomsByFloor).reduce((acc, [floor, floorRooms]) => {
    if (isDateFilterApplied) {
      // Use the floor as is (could be string or number)
      acc[floor] = {
        total: floorRooms.length,
        available: floorRooms.filter(room => room.status === 'available' && 
          isRoomAvailableBetweenDates(room.id, startDateFilter, endDateFilter)).length,
        reserved: floorRooms.filter(room => room.status === 'reserved' || 
          !isRoomAvailableBetweenDates(room.id, startDateFilter, endDateFilter)).length,
        sold: floorRooms.filter(room => room.status === 'sold').length,
      };
    } else {
      acc[floor] = {
        total: floorRooms.length,
        available: 0,
        reserved: 0,
        sold: 0,
      };
    }
    return acc;
  }, {} as Record<string | number, { total: number; available: number; reserved: number; sold: number }>);
  
  // Count total rooms by floor
  const totalRoomsByFloor = Object.entries(roomsByFloor).reduce((acc, [floor, rooms]) => {
    acc[floor] = rooms.length;
    return acc;
  }, {} as Record<string | number, number>);
  
  // State for active filters
  const [activeFilters, setActiveFilters] = useState<{
    selectedDonems: string[];
    roomCount?: string;
    roomType?: string;
    floorType?: string;
  }>({
    selectedDonems: [],
  });

  // Handle date range filter
  const handleDateRangeFilter = (
    startDate: Date | undefined, 
    endDate: Date | undefined,
    season?: string,
    roomCount?: string,
    roomType?: string,
    weekNumber?: string,
    donem?: string | string[],
    donemType?: 'single' | 'multiple' | 'all',
    floorType?: string
  ) => {
    setStartDateFilter(startDate);
    setEndDateFilter(endDate);
    
    // Update active filters
    const selectedDonems = Array.isArray(donem) ? donem : donem ? [donem] : [];
    setActiveFilters({
      selectedDonems,
      roomCount,
      roomType,
      floorType
    });
    
    // If floor type is provided, update the selected floor type
    if (floorType) {
      setSelectedFloorType(floorType);
    }
  };

  const handleFilterChange = (filterInfo: {
    selectedDonems: string[];
    roomCount?: string;
    roomType?: string;
    floorType?: string;
  }) => {
    setActiveFilters(filterInfo);
    
    // Update the selected floor type when it changes in the DateRangeFilter
    if (filterInfo.floorType) {
      // Force a re-render of the floor selection grid by updating the state
      setSelectedFloorType(filterInfo.floorType);
      
      // Automatically select the first floor of the selected type
      if (project.name === 'Sarot Palace') {
        let floorToSelect;
        
        if (filterInfo.floorType === 'A-C') {
          // Find the first A, A1, B, or C floor that has rooms
          floorToSelect = Object.keys(roomsByFloor)
            .find(floor => ['A', 'A1', 'B', 'C'].includes(floor));
          console.log('Selected A-C floor:', floorToSelect);
        } else if (filterInfo.floorType === 'D-F') {
          // Find the first D, E, or F floor that has rooms
          floorToSelect = Object.keys(roomsByFloor)
            .find(floor => ['D', 'E', 'F'].includes(floor));
          console.log('Selected D-F floor:', floorToSelect);
        } else if (filterInfo.floorType === 'penthouse') {
          // Find the penthouse floor
          floorToSelect = Object.keys(roomsByFloor)
            .find(floor => floor === 'P');
          console.log('Selected Penthouse floor:', floorToSelect);
        }
        
        if (floorToSelect) {
          // Convert to number if it's a numeric floor
          const floorNumber = isNaN(Number(floorToSelect)) ? floorToSelect : Number(floorToSelect);
          // Update the selected floor and tab value
          setSelectedFloor(floorNumber);
          setTabsValue(floorToSelect.toString());
          
          // Force a re-render of the component
          setTimeout(() => {
            // This empty setState will trigger a re-render
            setActiveFilters({...filterInfo});
          }, 0);
        }
      }
    }
  };
